//
//  BitwiseOperationsTests.swift
//  
//
//  Created by Dmitry Bespalov on 12.07.22.
//

import XCTest
@testable import PikapikaKitto

class BitwiseOperationsTests: XCTestCase {

    typealias Digit = UInt8

    func test_bitShiftRight() {
          // util_printTable(util_generateTable_bitShift(bitShiftRight))

        // NOTE: the `a` and `r` are in reversed digit order for better visual representation
        let table: [ShiftTestRow] = [
            (n: 2, B: 8, a: [0b1111_1111, 0b1111_1111], t: -17, r: [0b0000_0000, 0b0000_0000]),
            (n: 2, B: 8, a: [0b1111_1111, 0b1111_1111], t: -16, r: [0b0000_0000, 0b0000_0000]),
            (n: 2, B: 8, a: [0b1111_1111, 0b1111_1111], t: -15, r: [0b1000_0000, 0b0000_0000]),
            (n: 2, B: 8, a: [0b1111_1111, 0b1111_1111], t: -9, r: [0b1111_1110, 0b0000_0000]),
            (n: 2, B: 8, a: [0b1111_1111, 0b1111_1111], t: -8, r: [0b1111_1111, 0b0000_0000]),
            (n: 2, B: 8, a: [0b1111_1111, 0b1111_1111], t: -7, r: [0b1111_1111, 0b1000_0000]),
            (n: 2, B: 8, a: [0b1111_1111, 0b1111_1111], t: -5, r: [0b1111_1111, 0b1110_0000]),
            (n: 2, B: 8, a: [0b1111_1111, 0b1111_1111], t: -4, r: [0b1111_1111, 0b1111_0000]),
            (n: 2, B: 8, a: [0b1111_1111, 0b1111_1111], t: -3, r: [0b1111_1111, 0b1111_1000]),
            (n: 2, B: 8, a: [0b1111_1111, 0b1111_1111], t: -1, r: [0b1111_1111, 0b1111_1110]),
            (n: 2, B: 8, a: [0b1111_1111, 0b1111_1111], t: 0, r: [0b1111_1111, 0b1111_1111]),
            (n: 2, B: 8, a: [0b1111_1111, 0b1111_1111], t: 1, r: [0b0111_1111, 0b1111_1111]),
            (n: 2, B: 8, a: [0b1111_1111, 0b1111_1111], t: 3, r: [0b0001_1111, 0b1111_1111]),
            (n: 2, B: 8, a: [0b1111_1111, 0b1111_1111], t: 4, r: [0b0000_1111, 0b1111_1111]),
            (n: 2, B: 8, a: [0b1111_1111, 0b1111_1111], t: 5, r: [0b0000_0111, 0b1111_1111]),
            (n: 2, B: 8, a: [0b1111_1111, 0b1111_1111], t: 7, r: [0b0000_0001, 0b1111_1111]),
            (n: 2, B: 8, a: [0b1111_1111, 0b1111_1111], t: 8, r: [0b0000_0000, 0b1111_1111]),
            (n: 2, B: 8, a: [0b1111_1111, 0b1111_1111], t: 9, r: [0b0000_0000, 0b0111_1111]),
            (n: 2, B: 8, a: [0b1111_1111, 0b1111_1111], t: 15, r: [0b0000_0000, 0b0000_0001]),
            (n: 2, B: 8, a: [0b1111_1111, 0b1111_1111], t: 16, r: [0b0000_0000, 0b0000_0000]),
            (n: 2, B: 8, a: [0b1111_1111, 0b1111_1111], t: 17, r: [0b0000_0000, 0b0000_0000]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: -25, r: [0b0000_0000, 0b0000_0000, 0b0000_0000]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: -24, r: [0b0000_0000, 0b0000_0000, 0b0000_0000]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: -23, r: [0b1000_0000, 0b0000_0000, 0b0000_0000]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: -17, r: [0b1111_1110, 0b0000_0000, 0b0000_0000]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: -16, r: [0b1111_1111, 0b0000_0000, 0b0000_0000]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: -15, r: [0b1111_1111, 0b1000_0000, 0b0000_0000]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: -13, r: [0b1111_1111, 0b1110_0000, 0b0000_0000]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: -12, r: [0b1111_1111, 0b1111_0000, 0b0000_0000]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: -11, r: [0b1111_1111, 0b1111_1000, 0b0000_0000]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: -9, r: [0b1111_1111, 0b1111_1110, 0b0000_0000]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: -8, r: [0b1111_1111, 0b1111_1111, 0b0000_0000]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: -7, r: [0b1111_1111, 0b1111_1111, 0b1000_0000]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: -5, r: [0b1111_1111, 0b1111_1111, 0b1110_0000]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: -4, r: [0b1111_1111, 0b1111_1111, 0b1111_0000]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: -3, r: [0b1111_1111, 0b1111_1111, 0b1111_1000]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: -1, r: [0b1111_1111, 0b1111_1111, 0b1111_1110]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: 0, r: [0b1111_1111, 0b1111_1111, 0b1111_1111]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: 1, r: [0b0111_1111, 0b1111_1111, 0b1111_1111]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: 3, r: [0b0001_1111, 0b1111_1111, 0b1111_1111]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: 4, r: [0b0000_1111, 0b1111_1111, 0b1111_1111]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: 5, r: [0b0000_0111, 0b1111_1111, 0b1111_1111]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: 7, r: [0b0000_0001, 0b1111_1111, 0b1111_1111]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: 8, r: [0b0000_0000, 0b1111_1111, 0b1111_1111]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: 9, r: [0b0000_0000, 0b0111_1111, 0b1111_1111]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: 11, r: [0b0000_0000, 0b0001_1111, 0b1111_1111]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: 12, r: [0b0000_0000, 0b0000_1111, 0b1111_1111]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: 13, r: [0b0000_0000, 0b0000_0111, 0b1111_1111]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: 15, r: [0b0000_0000, 0b0000_0001, 0b1111_1111]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: 16, r: [0b0000_0000, 0b0000_0000, 0b1111_1111]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: 17, r: [0b0000_0000, 0b0000_0000, 0b0111_1111]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: 23, r: [0b0000_0000, 0b0000_0000, 0b0000_0001]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: 24, r: [0b0000_0000, 0b0000_0000, 0b0000_0000]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: 25, r: [0b0000_0000, 0b0000_0000, 0b0000_0000]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: -41, r: [0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: -40, r: [0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: -39, r: [0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: -21, r: [0b1111_1111, 0b1111_1111, 0b1110_0000, 0b0000_0000, 0b0000_0000]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: -20, r: [0b1111_1111, 0b1111_1111, 0b1111_0000, 0b0000_0000, 0b0000_0000]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: -19, r: [0b1111_1111, 0b1111_1111, 0b1111_1000, 0b0000_0000, 0b0000_0000]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: -17, r: [0b1111_1111, 0b1111_1111, 0b1111_1110, 0b0000_0000, 0b0000_0000]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: -16, r: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b0000_0000, 0b0000_0000]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: -15, r: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1000_0000, 0b0000_0000]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: -9, r: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1110, 0b0000_0000]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: -8, r: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b0000_0000]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: -7, r: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1000_0000]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: -5, r: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1110_0000]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: -4, r: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_0000]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: -3, r: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1000]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: -1, r: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1110]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: 0, r: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: 1, r: [0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: 3, r: [0b0001_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: 4, r: [0b0000_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: 5, r: [0b0000_0111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: 7, r: [0b0000_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: 8, r: [0b0000_0000, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: 9, r: [0b0000_0000, 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: 15, r: [0b0000_0000, 0b0000_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: 16, r: [0b0000_0000, 0b0000_0000, 0b1111_1111, 0b1111_1111, 0b1111_1111]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: 17, r: [0b0000_0000, 0b0000_0000, 0b0111_1111, 0b1111_1111, 0b1111_1111]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: 19, r: [0b0000_0000, 0b0000_0000, 0b0001_1111, 0b1111_1111, 0b1111_1111]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: 20, r: [0b0000_0000, 0b0000_0000, 0b0000_1111, 0b1111_1111, 0b1111_1111]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: 21, r: [0b0000_0000, 0b0000_0000, 0b0000_0111, 0b1111_1111, 0b1111_1111]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: 39, r: [0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0001]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: 40, r: [0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: 41, r: [0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000]),
        ]
        for row in table {
            let a = Array(row.a.reversed())
            let r = Array(row.r.reversed())
            assert(a.count == row.n)
            assert(r.count == row.n)
            assert(a.count > 0 && type(of: a[0]).bitWidth == row.B)

            let result  = bitShiftRight(a, row.t)
            XCTAssertEqual(result, r, "\(a) >> \(row.t)")
        }
    }


    func test_bitShiftLeft() {
        // util_printTable(util_generateTable_bitShift(bitShiftLeft))

        // NOTE: the `a` and `r` are in reversed digit order for better visual representation
        let table: [ShiftTestRow] = [
            (n: 2, B: 8, a: [0b1111_1111, 0b1111_1111], t: -17, r: [0b0000_0000, 0b0000_0000]),
            (n: 2, B: 8, a: [0b1111_1111, 0b1111_1111], t: -16, r: [0b0000_0000, 0b0000_0000]),
            (n: 2, B: 8, a: [0b1111_1111, 0b1111_1111], t: -15, r: [0b0000_0000, 0b0000_0001]),
            (n: 2, B: 8, a: [0b1111_1111, 0b1111_1111], t: -9, r: [0b0000_0000, 0b0111_1111]),
            (n: 2, B: 8, a: [0b1111_1111, 0b1111_1111], t: -8, r: [0b0000_0000, 0b1111_1111]),
            (n: 2, B: 8, a: [0b1111_1111, 0b1111_1111], t: -7, r: [0b0000_0001, 0b1111_1111]),
            (n: 2, B: 8, a: [0b1111_1111, 0b1111_1111], t: -5, r: [0b0000_0111, 0b1111_1111]),
            (n: 2, B: 8, a: [0b1111_1111, 0b1111_1111], t: -4, r: [0b0000_1111, 0b1111_1111]),
            (n: 2, B: 8, a: [0b1111_1111, 0b1111_1111], t: -3, r: [0b0001_1111, 0b1111_1111]),
            (n: 2, B: 8, a: [0b1111_1111, 0b1111_1111], t: -1, r: [0b0111_1111, 0b1111_1111]),
            (n: 2, B: 8, a: [0b1111_1111, 0b1111_1111], t: 0, r: [0b1111_1111, 0b1111_1111]),
            (n: 2, B: 8, a: [0b1111_1111, 0b1111_1111], t: 1, r: [0b1111_1111, 0b1111_1110]),
            (n: 2, B: 8, a: [0b1111_1111, 0b1111_1111], t: 3, r: [0b1111_1111, 0b1111_1000]),
            (n: 2, B: 8, a: [0b1111_1111, 0b1111_1111], t: 4, r: [0b1111_1111, 0b1111_0000]),
            (n: 2, B: 8, a: [0b1111_1111, 0b1111_1111], t: 5, r: [0b1111_1111, 0b1110_0000]),
            (n: 2, B: 8, a: [0b1111_1111, 0b1111_1111], t: 7, r: [0b1111_1111, 0b1000_0000]),
            (n: 2, B: 8, a: [0b1111_1111, 0b1111_1111], t: 8, r: [0b1111_1111, 0b0000_0000]),
            (n: 2, B: 8, a: [0b1111_1111, 0b1111_1111], t: 9, r: [0b1111_1110, 0b0000_0000]),
            (n: 2, B: 8, a: [0b1111_1111, 0b1111_1111], t: 15, r: [0b1000_0000, 0b0000_0000]),
            (n: 2, B: 8, a: [0b1111_1111, 0b1111_1111], t: 16, r: [0b0000_0000, 0b0000_0000]),
            (n: 2, B: 8, a: [0b1111_1111, 0b1111_1111], t: 17, r: [0b0000_0000, 0b0000_0000]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: -25, r: [0b0000_0000, 0b0000_0000, 0b0000_0000]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: -24, r: [0b0000_0000, 0b0000_0000, 0b0000_0000]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: -23, r: [0b0000_0000, 0b0000_0000, 0b0000_0001]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: -17, r: [0b0000_0000, 0b0000_0000, 0b0111_1111]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: -16, r: [0b0000_0000, 0b0000_0000, 0b1111_1111]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: -15, r: [0b0000_0000, 0b0000_0001, 0b1111_1111]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: -13, r: [0b0000_0000, 0b0000_0111, 0b1111_1111]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: -12, r: [0b0000_0000, 0b0000_1111, 0b1111_1111]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: -11, r: [0b0000_0000, 0b0001_1111, 0b1111_1111]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: -9, r: [0b0000_0000, 0b0111_1111, 0b1111_1111]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: -8, r: [0b0000_0000, 0b1111_1111, 0b1111_1111]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: -7, r: [0b0000_0001, 0b1111_1111, 0b1111_1111]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: -5, r: [0b0000_0111, 0b1111_1111, 0b1111_1111]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: -4, r: [0b0000_1111, 0b1111_1111, 0b1111_1111]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: -3, r: [0b0001_1111, 0b1111_1111, 0b1111_1111]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: -1, r: [0b0111_1111, 0b1111_1111, 0b1111_1111]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: 0, r: [0b1111_1111, 0b1111_1111, 0b1111_1111]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: 1, r: [0b1111_1111, 0b1111_1111, 0b1111_1110]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: 3, r: [0b1111_1111, 0b1111_1111, 0b1111_1000]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: 4, r: [0b1111_1111, 0b1111_1111, 0b1111_0000]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: 5, r: [0b1111_1111, 0b1111_1111, 0b1110_0000]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: 7, r: [0b1111_1111, 0b1111_1111, 0b1000_0000]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: 8, r: [0b1111_1111, 0b1111_1111, 0b0000_0000]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: 9, r: [0b1111_1111, 0b1111_1110, 0b0000_0000]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: 11, r: [0b1111_1111, 0b1111_1000, 0b0000_0000]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: 12, r: [0b1111_1111, 0b1111_0000, 0b0000_0000]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: 13, r: [0b1111_1111, 0b1110_0000, 0b0000_0000]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: 15, r: [0b1111_1111, 0b1000_0000, 0b0000_0000]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: 16, r: [0b1111_1111, 0b0000_0000, 0b0000_0000]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: 17, r: [0b1111_1110, 0b0000_0000, 0b0000_0000]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: 23, r: [0b1000_0000, 0b0000_0000, 0b0000_0000]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: 24, r: [0b0000_0000, 0b0000_0000, 0b0000_0000]),
            (n: 3, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111], t: 25, r: [0b0000_0000, 0b0000_0000, 0b0000_0000]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: -41, r: [0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: -40, r: [0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: -39, r: [0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0001]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: -21, r: [0b0000_0000, 0b0000_0000, 0b0000_0111, 0b1111_1111, 0b1111_1111]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: -20, r: [0b0000_0000, 0b0000_0000, 0b0000_1111, 0b1111_1111, 0b1111_1111]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: -19, r: [0b0000_0000, 0b0000_0000, 0b0001_1111, 0b1111_1111, 0b1111_1111]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: -17, r: [0b0000_0000, 0b0000_0000, 0b0111_1111, 0b1111_1111, 0b1111_1111]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: -16, r: [0b0000_0000, 0b0000_0000, 0b1111_1111, 0b1111_1111, 0b1111_1111]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: -15, r: [0b0000_0000, 0b0000_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: -9, r: [0b0000_0000, 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: -8, r: [0b0000_0000, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: -7, r: [0b0000_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: -5, r: [0b0000_0111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: -4, r: [0b0000_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: -3, r: [0b0001_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: -1, r: [0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: 0, r: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: 1, r: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1110]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: 3, r: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1000]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: 4, r: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_0000]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: 5, r: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1110_0000]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: 7, r: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1000_0000]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: 8, r: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b0000_0000]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: 9, r: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1110, 0b0000_0000]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: 15, r: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1000_0000, 0b0000_0000]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: 16, r: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b0000_0000, 0b0000_0000]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: 17, r: [0b1111_1111, 0b1111_1111, 0b1111_1110, 0b0000_0000, 0b0000_0000]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: 19, r: [0b1111_1111, 0b1111_1111, 0b1111_1000, 0b0000_0000, 0b0000_0000]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: 20, r: [0b1111_1111, 0b1111_1111, 0b1111_0000, 0b0000_0000, 0b0000_0000]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: 21, r: [0b1111_1111, 0b1111_1111, 0b1110_0000, 0b0000_0000, 0b0000_0000]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: 39, r: [0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: 40, r: [0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000]),
            (n: 5, B: 8, a: [0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111], t: 41, r: [0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000]),
        ]
        for row in table {
            let a = Array(row.a.reversed())
            let r = Array(row.r.reversed())
            assert(a.count == row.n)
            assert(r.count == row.n)
            assert(a.count > 0 && type(of: a[0]).bitWidth == row.B)

            let result  = bitShiftLeft(a, row.t)
            XCTAssertEqual(result, r, "\(a) >> \(row.t)")
        }
    }

    typealias ShiftTestRow = (n: Int, B: Int, a: [Digit], t: Int, r: [Digit])

    func util_generateTable_bitShift(_ test_fn: (_ a: [Digit], _ t: Int) -> [Digit]) -> [ShiftTestRow] {
        // Try multiple-digit numbers
            // N is the number of digits in a number
        let N = [2, 3, 5]
        // Try with shift sizes at interesting points: edges and ±1 around them
        let B = Digit.bitWidth

        // P[i] produces a point of interest given number of digits in a number
        let P: [(Int) -> Int] = [
            { n in 0 }, { n in B / 2 }, { n in B }, { n in 2 * B }, { n in n * B / 2 }, { n in n * B }
        ]
        // produces points around point of interest
        let eps: (_ p: Int, _ o: Int) -> [Int] = { p, o in [p - o, p, p + o] }

        // test table
        // n == a.count
        // B = bit width
        // a - input
        // t - shift size
        // r - result
        var table: [(n: Int, B: Int, a: [Digit], t: Int, r: [Digit])] = []

        for n in N {
            // Generate T: set of test shift sizes for N = n
                // Get t > 0
            var T = P.flatMap { p in eps(p(n), 1) }
                // get the t < 0
            T += T.map { t in -t }
                // remove duplicates
            T = Set(T).sorted()

            let a = [Digit](repeating: .max, count: n)

            for t in T {
                // Run the implementation
                let r = test_fn(a, t)

                assert(n == a.count)
                table.append((n: n, B: B, a: a, t: t, r: r))
            }
        }
        return table
    }

    // we print the numbers `a` and `r` in a reversed order because it is easier to check visually when
    // digits go in the same order as bits, i.e. from the most significant bit to the least significant bit.
    func util_printTable(_ table: [ShiftTestRow]) {
        for row in table {
            print("(n: \(row.n), B: \(row.B), a: [\(row.a.reversed().map(util_printDigit(_:)).joined(separator: ", "))], t: \(row.t), r: [\(row.r.reversed().map(util_printDigit(_:)).joined(separator: ", "))]),")
        }
    }

    func util_printDigit(_ d: Digit) -> String {
        let prefix = "0b"
        let groupBy = 4
        let groupSeparator = "_"

        // get each bit into a single digit
        let binaryDigits = Array((0..<Digit.bitWidth).map { bit in (d >> bit) & 1 }.reversed())
            // (d >> bit & 1) will give a bit's least significant bit at position bit
            // so we reverse to make it a correct position

        // group all bits
        let groups = stride(from: 0, to: binaryDigits.count, by: groupBy).map { ($0..<( $0 + groupBy )) }.map { binaryDigits[$0] }

        let output = prefix + groups.map { $0.map(String.init).joined() }.joined(separator: groupSeparator)

        return output
    }

    func test_printDigit() {
        XCTAssertEqual(util_printDigit(UInt8.max - 1), "0b1111_1110")
        XCTAssertEqual(UInt8.max - 1, 0b1111_1110)
    }

    func test_bitwiseLogic() {
        let table: [(a: [Digit], b: [Digit], and: [Digit], or: [Digit], xor: [Digit], not: [Digit])] = [
            (a: [0b0000_0000, 0b0000_0000], b: [0b0000_0000, 0b0000_0000], and: [0b0000_0000, 0b0000_0000], or: [0b0000_0000, 0b0000_0000], xor: [0b0000_0000, 0b0000_0000], not: [0b1111_1111, 0b1111_1111]),
            (a: [0b0000_0000, 0b0000_0000], b: [0b1111_1111, 0b1111_1111], and: [0b0000_0000, 0b0000_0000], or: [0b1111_1111, 0b1111_1111], xor: [0b1111_1111, 0b1111_1111], not: [0b1111_1111, 0b1111_1111]),
            (a: [0b1111_1111, 0b1111_1111], b: [0b0000_0000, 0b0000_0000], and: [0b0000_0000, 0b0000_0000], or: [0b1111_1111, 0b1111_1111], xor: [0b1111_1111, 0b1111_1111], not: [0b0000_0000, 0b0000_0000]),
            (a: [0b1111_1111, 0b1111_1111], b: [0b1111_1111, 0b1111_1111], and: [0b1111_1111, 0b1111_1111], or: [0b1111_1111, 0b1111_1111], xor: [0b0000_0000, 0b0000_0000], not: [0b0000_0000, 0b0000_0000]),
        ]

        for row in table {
            let and = bitAND(row.a, row.b)
            XCTAssertEqual(and, row.and, "\(row.a) & \(row.b)")

            let or = bitOR(row.a, row.b)
            XCTAssertEqual(or, row.or, "\(row.a) | \(row.b)")

            let xor = bitXOR(row.a, row.b)
            XCTAssertEqual(xor, row.xor, "\(row.a) ^ \(row.b)")

            let not = bitNOT(row.a)
            XCTAssertEqual(not, row.not, "~\(row.a)")
        }
    }

    func test_numberBitWidth() {
        // a.count == 0
        XCTAssertEqual( numberBitWidth( [ UInt8 ]() ), 0 )
        // a.count == 1
        XCTAssertEqual( numberBitWidth( [ UInt8(1) ] ), 8 )
        // a.count == 2
        XCTAssertEqual( numberBitWidth( [ UInt8(1), UInt8(1) ] ), 16 )
        // a.count == 5
        XCTAssertEqual( numberBitWidth( [ UInt8(1), UInt8(1), UInt8(1), UInt8(1), UInt8(1) ] ), 40 )

        // a.count == 2, Digit.bitWidth == 32
        XCTAssertEqual( numberBitWidth( [ UInt32(1), UInt32(1) ] ), 64 )

        // a.count == 2, Digit.bitWidth == 64
        XCTAssertEqual( numberBitWidth( [ UInt64(1), UInt64(1) ] ), 128 )
    }

    func test_numberOfLeadingZeroes() {
        // 0
        XCTAssertEqual( numberLeadingZeroBitCount( [ UInt8.max, UInt8.max, UInt8.max ] ), 0 )

        // 1
        XCTAssertEqual( numberLeadingZeroBitCount( [ UInt8.max, UInt8.max, (UInt8.max >> 1) ] ), 1 )

        // half digit zeroes
        XCTAssertEqual( numberLeadingZeroBitCount( [ UInt8.max, UInt8.max, (UInt8.max >> 4) ] ), 4 )

        // full digit
        XCTAssertEqual( numberLeadingZeroBitCount( [ UInt8.max, UInt8.max, 0 ] ), 8 )

        // full digit + 1
        XCTAssertEqual( numberLeadingZeroBitCount( [ UInt8.max, (UInt8.max >> 1), 0 ] ), 9 )

        // full number - 1
        XCTAssertEqual( numberLeadingZeroBitCount( [ UInt8(1), 0, 0 ] ), 23 )

        // full number
        XCTAssertEqual( numberLeadingZeroBitCount( [ UInt8(0), 0, 0 ] ), 24 )
    }

    func test_numberOfTrailingZeroes() {
        // 0
        XCTAssertEqual( numberTrailingZeroBitCount( [ UInt8(1), 0, 0 ] ), 0 )

        // 1
        XCTAssertEqual( numberTrailingZeroBitCount( [ (UInt8(1) << 1), 0, 0 ] ), 1 )

        // half digit zeroes
        XCTAssertEqual( numberTrailingZeroBitCount( [ (UInt8.max << 4), 0, 0 ] ), 4 )

        // full digit
        XCTAssertEqual( numberTrailingZeroBitCount( [ UInt8(0), 1, 0 ] ), 8 )

        // full digit + 1
        XCTAssertEqual( numberTrailingZeroBitCount( [ UInt8(0), (1 << 1), 0 ] ), 9 )

        // full number - 1
        XCTAssertEqual( numberTrailingZeroBitCount( [ UInt8(0), 0, (1 << 7) ] ), 23 )

        // full number
        XCTAssertEqual( numberTrailingZeroBitCount( [ UInt8(0), 0, 0 ] ), 24 )
    }
}
